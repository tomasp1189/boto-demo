{"version":3,"sources":["webpack:///./node_modules/crypto-js/enc-base64.js","webpack:///./node_modules/crypto-js/core.js","webpack:///./src/modules/Callback/Callback.html","webpack:///./src/modules/Callback/Callback.ts","webpack:///./src/modules/Callback/index.vue","webpack:///./node_modules/crypto-js/sha256.js"],"names":["root","factory","module","exports","this","CryptoJS","C","C_lib","lib","WordArray","C_enc","enc","Base64","stringify","wordArray","words","sigBytes","map","_map","clamp","base64Chars","i","byte1","byte2","byte3","triplet","j","push","charAt","paddingChar","length","join","parse","base64Str","base64StrLength","reverseMap","_reverseMap","charCodeAt","paddingIndex","indexOf","parseLoop","nBytes","bits1","bits2","bitsCombined","create","Math","undefined","crypto","window","self","globalThis","msCrypto","global","err","cryptoSecureRandomInt","getRandomValues","Uint32Array","randomBytes","readInt32LE","Error","Object","F","obj","subtype","prototype","Base","extend","overrides","mixIn","hasOwnProperty","init","$super","apply","arguments","instance","properties","propertyName","toString","clone","encoder","Hex","concat","thisWords","thatWords","thisSigBytes","thatSigBytes","thatByte","ceil","call","slice","random","hexChars","bite","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","Utf8","decodeURIComponent","escape","e","utf8Str","unescape","encodeURIComponent","BufferedBlockAlgorithm","reset","_data","_nDataBytes","_append","data","_process","doFlush","processedWords","dataWords","dataSigBytes","blockSize","blockSizeBytes","nBlocksReady","max","_minBufferSize","nWordsReady","nBytesReady","min","offset","_doProcessBlock","splice","C_algo","Hasher","cfg","_doReset","update","messageUpdate","finalize","hash","_doFinalize","_createHelper","hasher","message","_createHmacHelper","key","HMAC","algo","_hoisted_1","class","_hoisted_2","render","_ctx","_cache","src","context","name","computed","methods","error","description","removeLocalStorageAuthToken","$auth","logout","returnTo","location","origin","encodeURI","changePassword","new_pwd","current_pwd","token","headers","Headers","append","formdata","FormData","requestOptions","method","body","fetch","changePasswordResponse","login","usr","pwd","loginResponse","newUser","created","$route","query","error_description","template","auth","user","value","sub","email","path","templateId","type","console","log","newUserResponse","json","newUserResponseJson","username","ok","loginResponseJson","setAuthToken","auth_token","setLocalStorageAuthToken","$router","status","logJson","newLoginResponse","newLoginResponseJson","non_field_errors","statusText","__exports__","H","K","isPrime","n","sqrtN","sqrt","factor","getFractionalBits","nPrime","pow","W","SHA256","_hash","M","a","b","c","d","f","g","h","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","nBitsTotal","nBitsLeft","floor","HmacSHA256"],"mappings":"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","file":"js/chunk-4ae2b5e3-legacy.e0d63f1f.js","sourcesContent":[";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              var bitsCombined = bits1 | bits2;\n\t              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/*globals window, global, require*/\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\n\t    var crypto;\n\n\t    // Native crypto from window (Browser)\n\t    if (typeof window !== 'undefined' && window.crypto) {\n\t        crypto = window.crypto;\n\t    }\n\n\t    // Native crypto in web worker (Browser)\n\t    if (typeof self !== 'undefined' && self.crypto) {\n\t        crypto = self.crypto;\n\t    }\n\n\t    // Native crypto from worker\n\t    if (typeof globalThis !== 'undefined' && globalThis.crypto) {\n\t        crypto = globalThis.crypto;\n\t    }\n\n\t    // Native (experimental IE 11) crypto from window (Browser)\n\t    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n\t        crypto = window.msCrypto;\n\t    }\n\n\t    // Native crypto from global (NodeJS)\n\t    if (!crypto && typeof global !== 'undefined' && global.crypto) {\n\t        crypto = global.crypto;\n\t    }\n\n\t    // Native crypto import via require (NodeJS)\n\t    if (!crypto && typeof require === 'function') {\n\t        try {\n\t            crypto = require('crypto');\n\t        } catch (err) {}\n\t    }\n\n\t    /*\n\t     * Cryptographically secure pseudorandom number generator\n\t     *\n\t     * As Math.random() is cryptographically not safe to use\n\t     */\n\t    var cryptoSecureRandomInt = function () {\n\t        if (crypto) {\n\t            // Use getRandomValues method (Browser)\n\t            if (typeof crypto.getRandomValues === 'function') {\n\t                try {\n\t                    return crypto.getRandomValues(new Uint32Array(1))[0];\n\t                } catch (err) {}\n\t            }\n\n\t            // Use randomBytes method (NodeJS)\n\t            if (typeof crypto.randomBytes === 'function') {\n\t                try {\n\t                    return crypto.randomBytes(4).readInt32LE();\n\t                } catch (err) {}\n\t            }\n\t        }\n\n\t        throw new Error('Native crypto module could not be used to get secure random number.');\n\t    };\n\n\t    /*\n\t     * Local polyfill of Object.create\n\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {}\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }());\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var j = 0; j < thatSigBytes; j += 4) {\n\t                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            for (var i = 0; i < nBytes; i += 4) {\n\t                words.push(cryptoSecureRandomInt());\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            var processedWords;\n\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));","import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { class: \"d-flex flex-column min-vh-100 justify-content-center align-items-center\" }\nconst _hoisted_2 = [\"src\"]\n\nexport function render(_ctx, _cache) {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"img\", {\n      src: `${_ctx.context}img/loading.svg`\n    }, null, 8, _hoisted_2)\n  ]))\n}","import { defineComponent } from \"vue\";\nimport routes from \"@/routes\";\nimport sha256 from \"crypto-js/sha256\";\nimport Base64 from \"crypto-js/enc-base64\";\nimport { mapActions, mapGetters, mapState } from \"vuex\";\n\nexport default defineComponent({\n  name: \"Callback\",\n  data() {\n    return {\n      context: process.env.VUE_APP_CONTEXT,\n    };\n  },\n  computed: {\n    ...mapState(\"editor\", [\"template\"]),\n  },\n  methods: {\n    ...mapActions(\"editor\", [\"setTemplate\"]),\n    ...mapActions(\"auth\", [\n      \"setAuthToken\",\n      \"setLocalStorageAuthToken\",\n      \"removeLocalStorageAuthToken\",\n    ]),\n    error(error: string, description: string) {\n      this.removeLocalStorageAuthToken();\n      this.$auth.logout({\n        returnTo:\n          window.location.origin +\n          this.context +\n          `error?error=${encodeURI(error)}&error_description=${encodeURI(\n            description\n          )}`,\n      });\n    },\n    async changePassword(new_pwd: string, current_pwd: string, token: string) {\n      // Temporary shit\n      const headers = new Headers();\n      headers.append(\"Authorization\", `Token ${token}`);\n      const formdata = new FormData();\n      formdata.append(\"new_password\", Base64.stringify(sha256(new_pwd)));\n      formdata.append(\n        \"current_password\",\n        Base64.stringify(sha256(current_pwd))\n      );\n      const requestOptions = {\n        method: \"POST\",\n        headers,\n        body: formdata,\n      };\n      const changePasswordResponse = await fetch(\n        `https://${process.env.VUE_APP_BOTO_API_DOMAIN}/auth/users/set_password/`,\n        requestOptions\n      );\n      return changePasswordResponse;\n    },\n    async login(usr: string, pwd: string) {\n      const formdata = new FormData();\n      formdata.append(\"username\", usr);\n      formdata.append(\"password\", Base64.stringify(sha256(pwd)));\n      const requestOptions = {\n        method: \"POST\",\n        body: formdata,\n      };\n      const loginResponse = await fetch(\n        `https://${process.env.VUE_APP_BOTO_API_DOMAIN}/auth/token/login`,\n        requestOptions\n      );\n      return loginResponse;\n    },\n    async newUser(usr: string, pwd: string) {\n      const formdata = new FormData();\n      formdata.append(\"username\", usr);\n      formdata.append(\"password\", Base64.stringify(sha256(pwd)));\n      const requestOptions = {\n        method: \"POST\",\n        body: formdata,\n      };\n      const loginResponse = await fetch(\n        `https://${process.env.VUE_APP_BOTO_API_DOMAIN}/auth/users/`,\n        requestOptions\n      );\n      return loginResponse;\n    },\n  },\n  async created() {\n    if (this.$route.query.error) {\n      this.error(\n        this.$route.query.error.toString(),\n        this.$route.query.error_description!.toString()\n      );\n    } else {\n      // TODO user\n      const template = this.template;\n      const auth = this.$auth;\n      const pwd = auth.user.value.sub;\n      const usr = auth.user.value.email;\n      try {\n        // if no user or sub come back it doesn't make sense to continue with the flow.\n        if (!usr || !pwd) throw new Error(\"No user found\");\n\n        let path = \"dashboard\";\n        let query = {};\n        if (template) {\n          path = \"editor\";\n          query = {\n            templateId: template?.templateId,\n            type: \"recipe\",\n          };\n        }\n        console.log(\"template callback\", { template, path, query });\n        const newUserResponse = await this.newUser(usr, pwd);\n        const newUserResponseJson = await newUserResponse.json();\n        // TODO Do properly\n        if (newUserResponseJson.username) {\n          const loginResponse = await this.login(usr, pwd);\n          if (loginResponse.ok) {\n            const loginResponseJson = await loginResponse.json();\n            this.setAuthToken(loginResponseJson.auth_token);\n            this.setLocalStorageAuthToken(loginResponseJson.auth_token);\n            this.$router.push({ path, query });\n          } else {\n            if (loginResponse.status === 400) {\n              const log = await this.login(usr, auth.sub);\n              const logJson = await log.json();\n              await this.changePassword(pwd, auth.sub, logJson.auth_token);\n              const newLoginResponse = await this.login(usr, pwd);\n              const newLoginResponseJson = await newLoginResponse.json();\n              if (newLoginResponse.ok) {\n                this.setAuthToken(newLoginResponseJson.auth_token);\n                this.setLocalStorageAuthToken(newLoginResponseJson.auth_token);\n                this.$router.push({ path, query });\n              } else {\n                const e = newLoginResponseJson.non_field_errors[0];\n                this.error(`There was an error with the request (${e})`, e);\n              }\n            } else {\n              this.error(\n                `There was an error with the request (${loginResponse.status})`,\n                loginResponse.statusText\n              );\n            }\n          }\n        } else {\n          this.error(\"There was an error with the request.\", \"400\");\n        }\n      } catch (e) {\n        this.error(\"There was an error with the request.\", e as string);\n      }\n    }\n  },\n});\n","import { render } from \"./Callback.html?vue&type=template&id=54c78557&ts=true\"\nimport script from \"./Callback.ts?vue&type=script&lang=ts\"\nexport * from \"./Callback.ts?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/Users/tomaspuricelli/Dev/botoapp/boto/web_client/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Initialization and round constants tables\n\t    var H = [];\n\t    var K = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        function isPrime(n) {\n\t            var sqrtN = Math.sqrt(n);\n\t            for (var factor = 2; factor <= sqrtN; factor++) {\n\t                if (!(n % factor)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }\n\n\t        function getFractionalBits(n) {\n\t            return ((n - (n | 0)) * 0x100000000) | 0;\n\t        }\n\n\t        var n = 2;\n\t        var nPrime = 0;\n\t        while (nPrime < 64) {\n\t            if (isPrime(n)) {\n\t                if (nPrime < 8) {\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t                }\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t                nPrime++;\n\t            }\n\n\t            n++;\n\t        }\n\t    }());\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-256 hash algorithm.\n\t     */\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init(H.slice(0));\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\t            var f = H[5];\n\t            var g = H[6];\n\t            var h = H[7];\n\n\t            // Computation\n\t            for (var i = 0; i < 64; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var gamma0x = W[i - 15];\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                                   (gamma0x >>> 3);\n\n\t                    var gamma1x = W[i - 2];\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                                   (gamma1x >>> 10);\n\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t                }\n\n\t                var ch  = (e & f) ^ (~e & g);\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];\n\t                var t2 = sigma0 + maj;\n\n\t                h = g;\n\t                g = f;\n\t                f = e;\n\t                e = (d + t1) | 0;\n\t                d = c;\n\t                c = b;\n\t                b = a;\n\t                a = (t1 + t2) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t            H[5] = (H[5] + f) | 0;\n\t            H[6] = (H[6] + g) | 0;\n\t            H[7] = (H[7] + h) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA256('message');\n\t     *     var hash = CryptoJS.SHA256(wordArray);\n\t     */\n\t    C.SHA256 = Hasher._createHelper(SHA256);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);\n\t     */\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA256;\n\n}));"],"sourceRoot":""}